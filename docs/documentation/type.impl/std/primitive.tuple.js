(function() {var type_impls = {
"foliage":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystem%3C%3CF+as+SystemParamFunction%3CMarker%3E%3E::In,+%3CF+as+SystemParamFunction%3CMarker%3E%3E::Out,+(IsFunctionSystem,+Marker)%3E-for-F\" class=\"impl\"><a href=\"#impl-IntoSystem%3C%3CF+as+SystemParamFunction%3CMarker%3E%3E::In,+%3CF+as+SystemParamFunction%3CMarker%3E%3E::Out,+(IsFunctionSystem,+Marker)%3E-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Marker, F&gt; IntoSystem&lt;&lt;F as SystemParamFunction&lt;Marker&gt;&gt;::In, &lt;F as SystemParamFunction&lt;Marker&gt;&gt;::Out, (IsFunctionSystem, Marker)&gt; for F<span class=\"where fmt-newline\">where\n    Marker: 'static,\n    F: SystemParamFunction&lt;Marker&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.System\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.System\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">System</a> = FunctionSystem&lt;Marker, F&gt;</h4></section></summary><div class='docblock'>The type of [<code>System</code>] that this instance converts into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_system\" class=\"method trait-impl\"><a href=\"#method.into_system\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_system</a>(\n    func: F\n) -&gt; &lt;F as IntoSystem&lt;&lt;F as SystemParamFunction&lt;Marker&gt;&gt;::In, &lt;F as SystemParamFunction&lt;Marker&gt;&gt;::Out, (IsFunctionSystem, Marker)&gt;&gt;::System</h4></section></summary><div class='docblock'>Turns this value into its corresponding [<code>System</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pipe\" class=\"method trait-impl\"><a href=\"#method.pipe\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pipe</a>&lt;B, Final, MarkerB&gt;(\n    self,\n    system: B\n) -&gt; CombinatorSystem&lt;Pipe, Self::System, &lt;B as IntoSystem&lt;Out, Final, MarkerB&gt;&gt;::System&gt;<span class=\"where fmt-newline\">where\n    B: IntoSystem&lt;Out, Final, MarkerB&gt;,</span></h4></section></summary><div class='docblock'>Pass the output of this system <code>A</code> into a second system <code>B</code>, creating a new compound system. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>&lt;T, F&gt;(self, f: F) -&gt; AdapterSystem&lt;F, Self::System&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Out) -&gt; T,</span></h4></section></summary><div class='docblock'>Pass the output of this system into the passed function <code>f</code>, creating a new system that\noutputs the value returned from the function. <a>Read more</a></div></details></div></details>","IntoSystem<<F as SystemParamFunction<Marker>>::In, <F as SystemParamFunction<Marker>>::Out, (IsFunctionSystem, Marker)>","foliage::color::Rgb","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystem%3C%3CF+as+ExclusiveSystemParamFunction%3CMarker%3E%3E::In,+%3CF+as+ExclusiveSystemParamFunction%3CMarker%3E%3E::Out,+(IsExclusiveFunctionSystem,+Marker)%3E-for-F\" class=\"impl\"><a href=\"#impl-IntoSystem%3C%3CF+as+ExclusiveSystemParamFunction%3CMarker%3E%3E::In,+%3CF+as+ExclusiveSystemParamFunction%3CMarker%3E%3E::Out,+(IsExclusiveFunctionSystem,+Marker)%3E-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Marker, F&gt; IntoSystem&lt;&lt;F as ExclusiveSystemParamFunction&lt;Marker&gt;&gt;::In, &lt;F as ExclusiveSystemParamFunction&lt;Marker&gt;&gt;::Out, (IsExclusiveFunctionSystem, Marker)&gt; for F<span class=\"where fmt-newline\">where\n    Marker: 'static,\n    F: ExclusiveSystemParamFunction&lt;Marker&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.System\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.System\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">System</a> = ExclusiveFunctionSystem&lt;Marker, F&gt;</h4></section></summary><div class='docblock'>The type of [<code>System</code>] that this instance converts into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_system\" class=\"method trait-impl\"><a href=\"#method.into_system\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_system</a>(\n    func: F\n) -&gt; &lt;F as IntoSystem&lt;&lt;F as ExclusiveSystemParamFunction&lt;Marker&gt;&gt;::In, &lt;F as ExclusiveSystemParamFunction&lt;Marker&gt;&gt;::Out, (IsExclusiveFunctionSystem, Marker)&gt;&gt;::System</h4></section></summary><div class='docblock'>Turns this value into its corresponding [<code>System</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pipe\" class=\"method trait-impl\"><a href=\"#method.pipe\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pipe</a>&lt;B, Final, MarkerB&gt;(\n    self,\n    system: B\n) -&gt; CombinatorSystem&lt;Pipe, Self::System, &lt;B as IntoSystem&lt;Out, Final, MarkerB&gt;&gt;::System&gt;<span class=\"where fmt-newline\">where\n    B: IntoSystem&lt;Out, Final, MarkerB&gt;,</span></h4></section></summary><div class='docblock'>Pass the output of this system <code>A</code> into a second system <code>B</code>, creating a new compound system. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>&lt;T, F&gt;(self, f: F) -&gt; AdapterSystem&lt;F, Self::System&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Out) -&gt; T,</span></h4></section></summary><div class='docblock'>Pass the output of this system into the passed function <code>f</code>, creating a new system that\noutputs the value returned from the function. <a>Read more</a></div></details></div></details>","IntoSystem<<F as ExclusiveSystemParamFunction<Marker>>::In, <F as ExclusiveSystemParamFunction<Marker>>::Out, (IsExclusiveFunctionSystem, Marker)>","foliage::color::Rgb","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystemSet%3C(IsExclusiveFunctionSystem,+Marker)%3E-for-F\" class=\"impl\"><a href=\"#impl-IntoSystemSet%3C(IsExclusiveFunctionSystem,+Marker)%3E-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Marker, F&gt; IntoSystemSet&lt;(IsExclusiveFunctionSystem, Marker)&gt; for F<span class=\"where fmt-newline\">where\n    F: ExclusiveSystemParamFunction&lt;Marker&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Set\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Set\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Set</a> = SystemTypeSet&lt;F&gt;</h4></section></summary><div class='docblock'>The type of [<code>SystemSet</code>] this instance converts into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_system_set\" class=\"method trait-impl\"><a href=\"#method.into_system_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_system_set</a>(\n    self\n) -&gt; &lt;F as IntoSystemSet&lt;(IsExclusiveFunctionSystem, Marker)&gt;&gt;::Set</h4></section></summary><div class='docblock'>Converts this instance to its associated [<code>SystemSet</code>] type.</div></details></div></details>","IntoSystemSet<(IsExclusiveFunctionSystem, Marker)>","foliage::color::Rgb","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystemSet%3C(IsFunctionSystem,+Marker)%3E-for-F\" class=\"impl\"><a href=\"#impl-IntoSystemSet%3C(IsFunctionSystem,+Marker)%3E-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Marker, F&gt; IntoSystemSet&lt;(IsFunctionSystem, Marker)&gt; for F<span class=\"where fmt-newline\">where\n    F: SystemParamFunction&lt;Marker&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Set\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Set\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Set</a> = SystemTypeSet&lt;F&gt;</h4></section></summary><div class='docblock'>The type of [<code>SystemSet</code>] this instance converts into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_system_set\" class=\"method trait-impl\"><a href=\"#method.into_system_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_system_set</a>(\n    self\n) -&gt; &lt;F as IntoSystemSet&lt;(IsFunctionSystem, Marker)&gt;&gt;::Set</h4></section></summary><div class='docblock'>Converts this instance to its associated [<code>SystemSet</code>] type.</div></details></div></details>","IntoSystemSet<(IsFunctionSystem, Marker)>","foliage::color::Rgb","foliage::color::Rgba"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()