(function() {var type_impls = {
"foliage":[["<section id=\"impl-ReadOnlyWorldQuery-for-(F0,+F1,+F2)\" class=\"impl\"><a href=\"#impl-ReadOnlyWorldQuery-for-(F0,+F1,+F2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F0, F1, F2&gt; ReadOnlyWorldQuery for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a><span class=\"where fmt-newline\">where\n    F0: ReadOnlyWorldQuery,\n    F1: ReadOnlyWorldQuery,\n    F2: ReadOnlyWorldQuery,</span></h3></section><div class=\"docblock\"><p>SAFETY: each item in the tuple is read only</p>\n</div>","ReadOnlyWorldQuery","foliage::color::Rgb"],["<section id=\"impl-ReadOnlyWorldQuery-for-(F0,+F1,+F2,+F3)\" class=\"impl\"><a href=\"#impl-ReadOnlyWorldQuery-for-(F0,+F1,+F2,+F3)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F0, F1, F2, F3&gt; ReadOnlyWorldQuery for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a><span class=\"where fmt-newline\">where\n    F0: ReadOnlyWorldQuery,\n    F1: ReadOnlyWorldQuery,\n    F2: ReadOnlyWorldQuery,\n    F3: ReadOnlyWorldQuery,</span></h3></section><div class=\"docblock\"><p>SAFETY: each item in the tuple is read only</p>\n</div>","ReadOnlyWorldQuery","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystemSetConfigs-for-(S0,+S1,+S2)\" class=\"impl\"><a href=\"#impl-IntoSystemSetConfigs-for-(S0,+S1,+S2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S0, S1, S2&gt; IntoSystemSetConfigs for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(S0, S1, S2)</a><span class=\"where fmt-newline\">where\n    S0: IntoSystemSetConfigs,\n    S1: IntoSystemSetConfigs,\n    S2: IntoSystemSetConfigs,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.in_set\" class=\"method trait-impl\"><a href=\"#method.in_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">in_set</a>(self, set: impl SystemSet) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Add these system sets to the provided <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before\" class=\"method trait-impl\"><a href=\"#method.before\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Run before all systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.after\" class=\"method trait-impl\"><a href=\"#method.after\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">after</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Run after all systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_if\" class=\"method trait-impl\"><a href=\"#method.run_if\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">run_if</a>&lt;M&gt;(\n    self,\n    condition: impl Condition&lt;M&gt;\n) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Run the systems in this set(s) only if the [<code>Condition</code>] is <code>true</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ambiguous_with\" class=\"method trait-impl\"><a href=\"#method.ambiguous_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ambiguous_with</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Suppress warnings and errors that would result from systems in these sets having ambiguities\n(conflicting access but indeterminate order) with systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ambiguous_with_all\" class=\"method trait-impl\"><a href=\"#method.ambiguous_with_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ambiguous_with_all</a>(self) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Suppress warnings and errors that would result from systems in these sets having ambiguities\n(conflicting access but indeterminate order) with any other system.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chain</a>(self) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Treat this collection as a sequence of system sets. <a>Read more</a></div></details></div></details>","IntoSystemSetConfigs","foliage::color::Rgb"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystemSetConfigs-for-(S0,+S1,+S2,+S3)\" class=\"impl\"><a href=\"#impl-IntoSystemSetConfigs-for-(S0,+S1,+S2,+S3)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S0, S1, S2, S3&gt; IntoSystemSetConfigs for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(S0, S1, S2, S3)</a><span class=\"where fmt-newline\">where\n    S0: IntoSystemSetConfigs,\n    S1: IntoSystemSetConfigs,\n    S2: IntoSystemSetConfigs,\n    S3: IntoSystemSetConfigs,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.in_set\" class=\"method trait-impl\"><a href=\"#method.in_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">in_set</a>(self, set: impl SystemSet) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Add these system sets to the provided <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before\" class=\"method trait-impl\"><a href=\"#method.before\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Run before all systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.after\" class=\"method trait-impl\"><a href=\"#method.after\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">after</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Run after all systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_if\" class=\"method trait-impl\"><a href=\"#method.run_if\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">run_if</a>&lt;M&gt;(\n    self,\n    condition: impl Condition&lt;M&gt;\n) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Run the systems in this set(s) only if the [<code>Condition</code>] is <code>true</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ambiguous_with\" class=\"method trait-impl\"><a href=\"#method.ambiguous_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ambiguous_with</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Suppress warnings and errors that would result from systems in these sets having ambiguities\n(conflicting access but indeterminate order) with systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ambiguous_with_all\" class=\"method trait-impl\"><a href=\"#method.ambiguous_with_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ambiguous_with_all</a>(self) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Suppress warnings and errors that would result from systems in these sets having ambiguities\n(conflicting access but indeterminate order) with any other system.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chain</a>(self) -&gt; NodeConfigs&lt;Interned&lt;dyn SystemSet&gt;&gt;</h4></section></summary><div class='docblock'>Treat this collection as a sequence of system sets. <a>Read more</a></div></details></div></details>","IntoSystemSetConfigs","foliage::color::Rgba"],["<section id=\"impl-DynamicBundle-for-(B0,+B1,+B2,+B3)\" class=\"impl\"><a href=\"#impl-DynamicBundle-for-(B0,+B1,+B2,+B3)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B0, B1, B2, B3&gt; DynamicBundle for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(B0, B1, B2, B3)</a><span class=\"where fmt-newline\">where\n    B0: Bundle,\n    B1: Bundle,\n    B2: Bundle,\n    B3: Bundle,</span></h3></section>","DynamicBundle","foliage::color::Rgba"],["<section id=\"impl-DynamicBundle-for-(B0,+B1,+B2)\" class=\"impl\"><a href=\"#impl-DynamicBundle-for-(B0,+B1,+B2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B0, B1, B2&gt; DynamicBundle for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(B0, B1, B2)</a><span class=\"where fmt-newline\">where\n    B0: Bundle,\n    B1: Bundle,\n    B2: Bundle,</span></h3></section>","DynamicBundle","foliage::color::Rgb"],["<section id=\"impl-Bundle-for-(B0,+B1,+B2)\" class=\"impl\"><a href=\"#impl-Bundle-for-(B0,+B1,+B2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B0, B1, B2&gt; Bundle for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(B0, B1, B2)</a><span class=\"where fmt-newline\">where\n    B0: Bundle,\n    B1: Bundle,\n    B2: Bundle,</span></h3></section>","Bundle","foliage::color::Rgb"],["<section id=\"impl-Bundle-for-(B0,+B1,+B2,+B3)\" class=\"impl\"><a href=\"#impl-Bundle-for-(B0,+B1,+B2,+B3)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B0, B1, B2, B3&gt; Bundle for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(B0, B1, B2, B3)</a><span class=\"where fmt-newline\">where\n    B0: Bundle,\n    B1: Bundle,\n    B2: Bundle,\n    B3: Bundle,</span></h3></section>","Bundle","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystemSet%3C(IsFunctionSystem,+Marker)%3E-for-F\" class=\"impl\"><a href=\"#impl-IntoSystemSet%3C(IsFunctionSystem,+Marker)%3E-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Marker, F&gt; IntoSystemSet&lt;(IsFunctionSystem, Marker)&gt; for F<span class=\"where fmt-newline\">where\n    F: SystemParamFunction&lt;Marker&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Set\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Set\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Set</a> = SystemTypeSet&lt;F&gt;</h4></section></summary><div class='docblock'>The type of [<code>SystemSet</code>] this instance converts into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_system_set\" class=\"method trait-impl\"><a href=\"#method.into_system_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_system_set</a>(\n    self\n) -&gt; &lt;F as IntoSystemSet&lt;(IsFunctionSystem, Marker)&gt;&gt;::Set</h4></section></summary><div class='docblock'>Converts this instance to its associated [<code>SystemSet</code>] type.</div></details></div></details>","IntoSystemSet<(IsFunctionSystem, Marker)>","foliage::color::Rgb","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystemSet%3C(IsExclusiveFunctionSystem,+Marker)%3E-for-F\" class=\"impl\"><a href=\"#impl-IntoSystemSet%3C(IsExclusiveFunctionSystem,+Marker)%3E-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Marker, F&gt; IntoSystemSet&lt;(IsExclusiveFunctionSystem, Marker)&gt; for F<span class=\"where fmt-newline\">where\n    F: ExclusiveSystemParamFunction&lt;Marker&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Set\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Set\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Set</a> = SystemTypeSet&lt;F&gt;</h4></section></summary><div class='docblock'>The type of [<code>SystemSet</code>] this instance converts into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_system_set\" class=\"method trait-impl\"><a href=\"#method.into_system_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_system_set</a>(\n    self\n) -&gt; &lt;F as IntoSystemSet&lt;(IsExclusiveFunctionSystem, Marker)&gt;&gt;::Set</h4></section></summary><div class='docblock'>Converts this instance to its associated [<code>SystemSet</code>] type.</div></details></div></details>","IntoSystemSet<(IsExclusiveFunctionSystem, Marker)>","foliage::color::Rgb","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystem%3C%3CF+as+ExclusiveSystemParamFunction%3CMarker%3E%3E::In,+%3CF+as+ExclusiveSystemParamFunction%3CMarker%3E%3E::Out,+(IsExclusiveFunctionSystem,+Marker)%3E-for-F\" class=\"impl\"><a href=\"#impl-IntoSystem%3C%3CF+as+ExclusiveSystemParamFunction%3CMarker%3E%3E::In,+%3CF+as+ExclusiveSystemParamFunction%3CMarker%3E%3E::Out,+(IsExclusiveFunctionSystem,+Marker)%3E-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Marker, F&gt; IntoSystem&lt;&lt;F as ExclusiveSystemParamFunction&lt;Marker&gt;&gt;::In, &lt;F as ExclusiveSystemParamFunction&lt;Marker&gt;&gt;::Out, (IsExclusiveFunctionSystem, Marker)&gt; for F<span class=\"where fmt-newline\">where\n    Marker: 'static,\n    F: ExclusiveSystemParamFunction&lt;Marker&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.System\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.System\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">System</a> = ExclusiveFunctionSystem&lt;Marker, F&gt;</h4></section></summary><div class='docblock'>The type of [<code>System</code>] that this instance converts into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_system\" class=\"method trait-impl\"><a href=\"#method.into_system\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_system</a>(\n    func: F\n) -&gt; &lt;F as IntoSystem&lt;&lt;F as ExclusiveSystemParamFunction&lt;Marker&gt;&gt;::In, &lt;F as ExclusiveSystemParamFunction&lt;Marker&gt;&gt;::Out, (IsExclusiveFunctionSystem, Marker)&gt;&gt;::System</h4></section></summary><div class='docblock'>Turns this value into its corresponding [<code>System</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pipe\" class=\"method trait-impl\"><a href=\"#method.pipe\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pipe</a>&lt;B, Final, MarkerB&gt;(\n    self,\n    system: B\n) -&gt; CombinatorSystem&lt;Pipe, Self::System, &lt;B as IntoSystem&lt;Out, Final, MarkerB&gt;&gt;::System&gt;<span class=\"where fmt-newline\">where\n    B: IntoSystem&lt;Out, Final, MarkerB&gt;,</span></h4></section></summary><div class='docblock'>Pass the output of this system <code>A</code> into a second system <code>B</code>, creating a new compound system. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>&lt;T, F&gt;(self, f: F) -&gt; AdapterSystem&lt;F, Self::System&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Out) -&gt; T,</span></h4></section></summary><div class='docblock'>Pass the output of this system into the passed function <code>f</code>, creating a new system that\noutputs the value returned from the function. <a>Read more</a></div></details></div></details>","IntoSystem<<F as ExclusiveSystemParamFunction<Marker>>::In, <F as ExclusiveSystemParamFunction<Marker>>::Out, (IsExclusiveFunctionSystem, Marker)>","foliage::color::Rgb","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystem%3C%3CF+as+SystemParamFunction%3CMarker%3E%3E::In,+%3CF+as+SystemParamFunction%3CMarker%3E%3E::Out,+(IsFunctionSystem,+Marker)%3E-for-F\" class=\"impl\"><a href=\"#impl-IntoSystem%3C%3CF+as+SystemParamFunction%3CMarker%3E%3E::In,+%3CF+as+SystemParamFunction%3CMarker%3E%3E::Out,+(IsFunctionSystem,+Marker)%3E-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Marker, F&gt; IntoSystem&lt;&lt;F as SystemParamFunction&lt;Marker&gt;&gt;::In, &lt;F as SystemParamFunction&lt;Marker&gt;&gt;::Out, (IsFunctionSystem, Marker)&gt; for F<span class=\"where fmt-newline\">where\n    Marker: 'static,\n    F: SystemParamFunction&lt;Marker&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.System\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.System\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">System</a> = FunctionSystem&lt;Marker, F&gt;</h4></section></summary><div class='docblock'>The type of [<code>System</code>] that this instance converts into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_system\" class=\"method trait-impl\"><a href=\"#method.into_system\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_system</a>(\n    func: F\n) -&gt; &lt;F as IntoSystem&lt;&lt;F as SystemParamFunction&lt;Marker&gt;&gt;::In, &lt;F as SystemParamFunction&lt;Marker&gt;&gt;::Out, (IsFunctionSystem, Marker)&gt;&gt;::System</h4></section></summary><div class='docblock'>Turns this value into its corresponding [<code>System</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pipe\" class=\"method trait-impl\"><a href=\"#method.pipe\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pipe</a>&lt;B, Final, MarkerB&gt;(\n    self,\n    system: B\n) -&gt; CombinatorSystem&lt;Pipe, Self::System, &lt;B as IntoSystem&lt;Out, Final, MarkerB&gt;&gt;::System&gt;<span class=\"where fmt-newline\">where\n    B: IntoSystem&lt;Out, Final, MarkerB&gt;,</span></h4></section></summary><div class='docblock'>Pass the output of this system <code>A</code> into a second system <code>B</code>, creating a new compound system. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>&lt;T, F&gt;(self, f: F) -&gt; AdapterSystem&lt;F, Self::System&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Out) -&gt; T,</span></h4></section></summary><div class='docblock'>Pass the output of this system into the passed function <code>f</code>, creating a new system that\noutputs the value returned from the function. <a>Read more</a></div></details></div></details>","IntoSystem<<F as SystemParamFunction<Marker>>::In, <F as SystemParamFunction<Marker>>::Out, (IsFunctionSystem, Marker)>","foliage::color::Rgb","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExclusiveSystemParam-for-(P0,+P1,+P2,+P3)\" class=\"impl\"><a href=\"#impl-ExclusiveSystemParam-for-(P0,+P1,+P2,+P3)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P0, P1, P2, P3&gt; ExclusiveSystemParam for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2, P3)</a><span class=\"where fmt-newline\">where\n    P0: ExclusiveSystemParam,\n    P1: ExclusiveSystemParam,\n    P2: ExclusiveSystemParam,\n    P3: ExclusiveSystemParam,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.State\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.State\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">State</a> = (&lt;P0 as ExclusiveSystemParam&gt;::State, &lt;P1 as ExclusiveSystemParam&gt;::State, &lt;P2 as ExclusiveSystemParam&gt;::State, &lt;P3 as ExclusiveSystemParam&gt;::State)</h4></section></summary><div class='docblock'>Used to store data which persists across invocations of a system.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a>&lt;'s&gt; = (&lt;P0 as ExclusiveSystemParam&gt;::Item&lt;'s&gt;, &lt;P1 as ExclusiveSystemParam&gt;::Item&lt;'s&gt;, &lt;P2 as ExclusiveSystemParam&gt;::Item&lt;'s&gt;, &lt;P3 as ExclusiveSystemParam&gt;::Item&lt;'s&gt;)</h4></section></summary><div class='docblock'>The item type returned when constructing this system param.\nSee [<code>SystemParam::Item</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.init\" class=\"method trait-impl\"><a href=\"#method.init\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">init</a>(\n    _world: &amp;mut World,\n    _system_meta: &amp;mut SystemMeta\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2, P3)</a> as ExclusiveSystemParam&gt;::State</h4></section></summary><div class='docblock'>Creates a new instance of this param’s <a href=\"Self::State\"><code>State</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_param\" class=\"method trait-impl\"><a href=\"#method.get_param\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_param</a>&lt;'s&gt;(\n    state: &amp;'s mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2, P3)</a> as ExclusiveSystemParam&gt;::State,\n    system_meta: &amp;SystemMeta\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2, P3)</a> as ExclusiveSystemParam&gt;::Item&lt;'s&gt;</h4></section></summary><div class='docblock'>Creates a parameter to be passed into an <a href=\"super::ExclusiveSystemParamFunction\"><code>ExclusiveSystemParamFunction</code></a>.</div></details></div></details>","ExclusiveSystemParam","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExclusiveSystemParam-for-(P0,+P1,+P2)\" class=\"impl\"><a href=\"#impl-ExclusiveSystemParam-for-(P0,+P1,+P2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P0, P1, P2&gt; ExclusiveSystemParam for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2)</a><span class=\"where fmt-newline\">where\n    P0: ExclusiveSystemParam,\n    P1: ExclusiveSystemParam,\n    P2: ExclusiveSystemParam,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.State\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.State\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">State</a> = (&lt;P0 as ExclusiveSystemParam&gt;::State, &lt;P1 as ExclusiveSystemParam&gt;::State, &lt;P2 as ExclusiveSystemParam&gt;::State)</h4></section></summary><div class='docblock'>Used to store data which persists across invocations of a system.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a>&lt;'s&gt; = (&lt;P0 as ExclusiveSystemParam&gt;::Item&lt;'s&gt;, &lt;P1 as ExclusiveSystemParam&gt;::Item&lt;'s&gt;, &lt;P2 as ExclusiveSystemParam&gt;::Item&lt;'s&gt;)</h4></section></summary><div class='docblock'>The item type returned when constructing this system param.\nSee [<code>SystemParam::Item</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.init\" class=\"method trait-impl\"><a href=\"#method.init\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">init</a>(\n    _world: &amp;mut World,\n    _system_meta: &amp;mut SystemMeta\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2)</a> as ExclusiveSystemParam&gt;::State</h4></section></summary><div class='docblock'>Creates a new instance of this param’s <a href=\"Self::State\"><code>State</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_param\" class=\"method trait-impl\"><a href=\"#method.get_param\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_param</a>&lt;'s&gt;(\n    state: &amp;'s mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2)</a> as ExclusiveSystemParam&gt;::State,\n    system_meta: &amp;SystemMeta\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2)</a> as ExclusiveSystemParam&gt;::Item&lt;'s&gt;</h4></section></summary><div class='docblock'>Creates a parameter to be passed into an <a href=\"super::ExclusiveSystemParamFunction\"><code>ExclusiveSystemParamFunction</code></a>.</div></details></div></details>","ExclusiveSystemParam","foliage::color::Rgb"],["<section id=\"impl-ArchetypeFilter-for-(F0,+F1,+F2,+F3)\" class=\"impl\"><a href=\"#impl-ArchetypeFilter-for-(F0,+F1,+F2,+F3)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F0, F1, F2, F3&gt; ArchetypeFilter for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a><span class=\"where fmt-newline\">where\n    F0: ArchetypeFilter,\n    F1: ArchetypeFilter,\n    F2: ArchetypeFilter,\n    F3: ArchetypeFilter,</span></h3></section>","ArchetypeFilter","foliage::color::Rgba"],["<section id=\"impl-ArchetypeFilter-for-(F0,+F1,+F2)\" class=\"impl\"><a href=\"#impl-ArchetypeFilter-for-(F0,+F1,+F2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F0, F1, F2&gt; ArchetypeFilter for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a><span class=\"where fmt-newline\">where\n    F0: ArchetypeFilter,\n    F1: ArchetypeFilter,\n    F2: ArchetypeFilter,</span></h3></section>","ArchetypeFilter","foliage::color::Rgb"],["<section id=\"impl-ReadOnlySystemParam-for-(P0,+P1,+P2,+P3)\" class=\"impl\"><a href=\"#impl-ReadOnlySystemParam-for-(P0,+P1,+P2,+P3)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P0, P1, P2, P3&gt; ReadOnlySystemParam for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2, P3)</a><span class=\"where fmt-newline\">where\n    P0: ReadOnlySystemParam,\n    P1: ReadOnlySystemParam,\n    P2: ReadOnlySystemParam,\n    P3: ReadOnlySystemParam,</span></h3></section>","ReadOnlySystemParam","foliage::color::Rgba"],["<section id=\"impl-ReadOnlySystemParam-for-(P0,+P1,+P2)\" class=\"impl\"><a href=\"#impl-ReadOnlySystemParam-for-(P0,+P1,+P2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P0, P1, P2&gt; ReadOnlySystemParam for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2)</a><span class=\"where fmt-newline\">where\n    P0: ReadOnlySystemParam,\n    P1: ReadOnlySystemParam,\n    P2: ReadOnlySystemParam,</span></h3></section>","ReadOnlySystemParam","foliage::color::Rgb"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WorldQuery-for-(F0,+F1,+F2,+F3)\" class=\"impl\"><a href=\"#impl-WorldQuery-for-(F0,+F1,+F2,+F3)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F0, F1, F2, F3&gt; WorldQuery for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a><span class=\"where fmt-newline\">where\n    F0: WorldQuery,\n    F1: WorldQuery,\n    F2: WorldQuery,\n    F3: WorldQuery,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Fetch\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Fetch\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Fetch</a>&lt;'w&gt; = (&lt;F0 as WorldQuery&gt;::Fetch&lt;'w&gt;, &lt;F1 as WorldQuery&gt;::Fetch&lt;'w&gt;, &lt;F2 as WorldQuery&gt;::Fetch&lt;'w&gt;, &lt;F3 as WorldQuery&gt;::Fetch&lt;'w&gt;)</h4></section></summary><div class='docblock'>Per archetype/table state used by this [<code>WorldQuery</code>] to fetch <a href=\"crate::query::WorldQuery::Item\"><code>Self::Item</code></a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a>&lt;'w&gt; = (&lt;F0 as WorldQuery&gt;::Item&lt;'w&gt;, &lt;F1 as WorldQuery&gt;::Item&lt;'w&gt;, &lt;F2 as WorldQuery&gt;::Item&lt;'w&gt;, &lt;F3 as WorldQuery&gt;::Item&lt;'w&gt;)</h4></section></summary><div class='docblock'>The item returned by this [<code>WorldQuery</code>]</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.ReadOnly\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ReadOnly\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ReadOnly</a> = (&lt;F0 as WorldQuery&gt;::ReadOnly, &lt;F1 as WorldQuery&gt;::ReadOnly, &lt;F2 as WorldQuery&gt;::ReadOnly, &lt;F3 as WorldQuery&gt;::ReadOnly)</h4></section></summary><div class='docblock'>The read-only variant of this [<code>WorldQuery</code>], which satisfies the [<code>ReadOnlyWorldQuery</code>] trait.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.State\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.State\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">State</a> = (&lt;F0 as WorldQuery&gt;::State, &lt;F1 as WorldQuery&gt;::State, &lt;F2 as WorldQuery&gt;::State, &lt;F3 as WorldQuery&gt;::State)</h4></section></summary><div class='docblock'>State used to construct a <a href=\"crate::query::WorldQuery::Fetch\"><code>Self::Fetch</code></a>. This will be cached inside <a href=\"crate::query::QueryState\"><code>QueryState</code></a>,\nso it is best to move as much data / computation here as possible to reduce the cost of\nconstructing <a href=\"crate::query::WorldQuery::Fetch\"><code>Self::Fetch</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink\" class=\"method trait-impl\"><a href=\"#method.shrink\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shrink</a>&lt;'wlong, 'wshort&gt;(\n    item: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::Item&lt;'wlong&gt;\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::Item&lt;'wshort&gt;<span class=\"where fmt-newline\">where\n    'wlong: 'wshort,</span></h4></section></summary><div class='docblock'>This function manually implements subtyping for the query items.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.init_fetch\" class=\"method trait-impl\"><a href=\"#method.init_fetch\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">init_fetch</a>&lt;'w&gt;(\n    _world: UnsafeWorldCell&lt;'w&gt;,\n    state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::State,\n    _last_run: Tick,\n    _this_run: Tick\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::Fetch&lt;'w&gt;</h4></section></summary><div class='docblock'>Creates a new instance of this fetch. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.IS_DENSE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.IS_DENSE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">IS_DENSE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a> = _</h4></section></summary><div class='docblock'>Returns true if (and only if) every table of every archetype matched by this fetch contains\nall of the matched components. This is used to select a more efficient “table iterator”\nfor “dense” queries. If this returns true, [<code>WorldQuery::set_table</code>] must be used before\n[<code>WorldQuery::fetch</code>] can be called for iterators. If this returns false,\n[<code>WorldQuery::set_archetype</code>] must be used before [<code>WorldQuery::fetch</code>] can be called for\niterators.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.IS_ARCHETYPAL\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.IS_ARCHETYPAL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">IS_ARCHETYPAL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a> = _</h4></section></summary><div class='docblock'>Returns true if (and only if) this Fetch relies strictly on archetypes to limit which\ncomponents are accessed by the Query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_archetype\" class=\"method trait-impl\"><a href=\"#method.set_archetype\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">set_archetype</a>&lt;'w&gt;(\n    _fetch: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::Fetch&lt;'w&gt;,\n    _state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::State,\n    _archetype: &amp;'w Archetype,\n    _table: &amp;'w Table\n)</h4></section></summary><div class='docblock'>Adjusts internal state to account for the next [<code>Archetype</code>]. This will always be called on\narchetypes that match this [<code>WorldQuery</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_table\" class=\"method trait-impl\"><a href=\"#method.set_table\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">set_table</a>&lt;'w&gt;(\n    _fetch: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::Fetch&lt;'w&gt;,\n    _state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::State,\n    _table: &amp;'w Table\n)</h4></section></summary><div class='docblock'>Adjusts internal state to account for the next [<code>Table</code>]. This will always be called on tables\nthat match this [<code>WorldQuery</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch\" class=\"method trait-impl\"><a href=\"#method.fetch\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">fetch</a>&lt;'w&gt;(\n    _fetch: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::Fetch&lt;'w&gt;,\n    _entity: Entity,\n    _table_row: TableRow\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::Item&lt;'w&gt;</h4></section></summary><div class='docblock'>Fetch <a href=\"%60WorldQuery::Item%60\"><code>Self::Item</code></a> for either the given <code>entity</code> in the current [<code>Table</code>],\nor for the given <code>entity</code> in the current [<code>Archetype</code>]. This must always be called after\n[<code>WorldQuery::set_table</code>] with a <code>table_row</code> in the range of the current [<code>Table</code>] or after\n[<code>WorldQuery::set_archetype</code>]  with a <code>entity</code> in the current archetype. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_fetch\" class=\"method trait-impl\"><a href=\"#method.filter_fetch\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">filter_fetch</a>(\n    _fetch: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::Fetch&lt;'_&gt;,\n    _entity: Entity,\n    _table_row: TableRow\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_component_access\" class=\"method trait-impl\"><a href=\"#method.update_component_access\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">update_component_access</a>(\n    state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::State,\n    _access: &amp;mut FilteredAccess&lt;ComponentId&gt;\n)</h4></section></summary><div class='docblock'>Adds any component accesses used by this [<code>WorldQuery</code>] to <code>access</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_archetype_component_access\" class=\"method trait-impl\"><a href=\"#method.update_archetype_component_access\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">update_archetype_component_access</a>(\n    state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::State,\n    _archetype: &amp;Archetype,\n    _access: &amp;mut Access&lt;ArchetypeComponentId&gt;\n)</h4></section></summary><div class='docblock'>For the given <code>archetype</code>, adds any component accessed used by this [<code>WorldQuery</code>] to <code>access</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.init_state\" class=\"method trait-impl\"><a href=\"#method.init_state\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">init_state</a>(_world: &amp;mut World) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::State</h4></section></summary><div class='docblock'>Creates and initializes a <a href=\"WorldQuery::State\"><code>State</code></a> for this [<code>WorldQuery</code>] type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.matches_component_set\" class=\"method trait-impl\"><a href=\"#method.matches_component_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">matches_component_set</a>(\n    state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2, F3)</a> as WorldQuery&gt;::State,\n    _set_contains_id: &amp;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(ComponentId) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this query matches a set of components. Otherwise, returns <code>false</code>.</div></details></div></details>","WorldQuery","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WorldQuery-for-(F0,+F1,+F2)\" class=\"impl\"><a href=\"#impl-WorldQuery-for-(F0,+F1,+F2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F0, F1, F2&gt; WorldQuery for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a><span class=\"where fmt-newline\">where\n    F0: WorldQuery,\n    F1: WorldQuery,\n    F2: WorldQuery,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Fetch\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Fetch\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Fetch</a>&lt;'w&gt; = (&lt;F0 as WorldQuery&gt;::Fetch&lt;'w&gt;, &lt;F1 as WorldQuery&gt;::Fetch&lt;'w&gt;, &lt;F2 as WorldQuery&gt;::Fetch&lt;'w&gt;)</h4></section></summary><div class='docblock'>Per archetype/table state used by this [<code>WorldQuery</code>] to fetch <a href=\"crate::query::WorldQuery::Item\"><code>Self::Item</code></a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a>&lt;'w&gt; = (&lt;F0 as WorldQuery&gt;::Item&lt;'w&gt;, &lt;F1 as WorldQuery&gt;::Item&lt;'w&gt;, &lt;F2 as WorldQuery&gt;::Item&lt;'w&gt;)</h4></section></summary><div class='docblock'>The item returned by this [<code>WorldQuery</code>]</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.ReadOnly\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ReadOnly\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ReadOnly</a> = (&lt;F0 as WorldQuery&gt;::ReadOnly, &lt;F1 as WorldQuery&gt;::ReadOnly, &lt;F2 as WorldQuery&gt;::ReadOnly)</h4></section></summary><div class='docblock'>The read-only variant of this [<code>WorldQuery</code>], which satisfies the [<code>ReadOnlyWorldQuery</code>] trait.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.State\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.State\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">State</a> = (&lt;F0 as WorldQuery&gt;::State, &lt;F1 as WorldQuery&gt;::State, &lt;F2 as WorldQuery&gt;::State)</h4></section></summary><div class='docblock'>State used to construct a <a href=\"crate::query::WorldQuery::Fetch\"><code>Self::Fetch</code></a>. This will be cached inside <a href=\"crate::query::QueryState\"><code>QueryState</code></a>,\nso it is best to move as much data / computation here as possible to reduce the cost of\nconstructing <a href=\"crate::query::WorldQuery::Fetch\"><code>Self::Fetch</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink\" class=\"method trait-impl\"><a href=\"#method.shrink\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shrink</a>&lt;'wlong, 'wshort&gt;(\n    item: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::Item&lt;'wlong&gt;\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::Item&lt;'wshort&gt;<span class=\"where fmt-newline\">where\n    'wlong: 'wshort,</span></h4></section></summary><div class='docblock'>This function manually implements subtyping for the query items.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.init_fetch\" class=\"method trait-impl\"><a href=\"#method.init_fetch\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">init_fetch</a>&lt;'w&gt;(\n    _world: UnsafeWorldCell&lt;'w&gt;,\n    state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::State,\n    _last_run: Tick,\n    _this_run: Tick\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::Fetch&lt;'w&gt;</h4></section></summary><div class='docblock'>Creates a new instance of this fetch. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.IS_DENSE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.IS_DENSE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">IS_DENSE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a> = _</h4></section></summary><div class='docblock'>Returns true if (and only if) every table of every archetype matched by this fetch contains\nall of the matched components. This is used to select a more efficient “table iterator”\nfor “dense” queries. If this returns true, [<code>WorldQuery::set_table</code>] must be used before\n[<code>WorldQuery::fetch</code>] can be called for iterators. If this returns false,\n[<code>WorldQuery::set_archetype</code>] must be used before [<code>WorldQuery::fetch</code>] can be called for\niterators.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.IS_ARCHETYPAL\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.IS_ARCHETYPAL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">IS_ARCHETYPAL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a> = _</h4></section></summary><div class='docblock'>Returns true if (and only if) this Fetch relies strictly on archetypes to limit which\ncomponents are accessed by the Query. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_archetype\" class=\"method trait-impl\"><a href=\"#method.set_archetype\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">set_archetype</a>&lt;'w&gt;(\n    _fetch: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::Fetch&lt;'w&gt;,\n    _state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::State,\n    _archetype: &amp;'w Archetype,\n    _table: &amp;'w Table\n)</h4></section></summary><div class='docblock'>Adjusts internal state to account for the next [<code>Archetype</code>]. This will always be called on\narchetypes that match this [<code>WorldQuery</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_table\" class=\"method trait-impl\"><a href=\"#method.set_table\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">set_table</a>&lt;'w&gt;(\n    _fetch: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::Fetch&lt;'w&gt;,\n    _state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::State,\n    _table: &amp;'w Table\n)</h4></section></summary><div class='docblock'>Adjusts internal state to account for the next [<code>Table</code>]. This will always be called on tables\nthat match this [<code>WorldQuery</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fetch\" class=\"method trait-impl\"><a href=\"#method.fetch\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">fetch</a>&lt;'w&gt;(\n    _fetch: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::Fetch&lt;'w&gt;,\n    _entity: Entity,\n    _table_row: TableRow\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::Item&lt;'w&gt;</h4></section></summary><div class='docblock'>Fetch <a href=\"%60WorldQuery::Item%60\"><code>Self::Item</code></a> for either the given <code>entity</code> in the current [<code>Table</code>],\nor for the given <code>entity</code> in the current [<code>Archetype</code>]. This must always be called after\n[<code>WorldQuery::set_table</code>] with a <code>table_row</code> in the range of the current [<code>Table</code>] or after\n[<code>WorldQuery::set_archetype</code>]  with a <code>entity</code> in the current archetype. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_fetch\" class=\"method trait-impl\"><a href=\"#method.filter_fetch\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">filter_fetch</a>(\n    _fetch: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::Fetch&lt;'_&gt;,\n    _entity: Entity,\n    _table_row: TableRow\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_component_access\" class=\"method trait-impl\"><a href=\"#method.update_component_access\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">update_component_access</a>(\n    state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::State,\n    _access: &amp;mut FilteredAccess&lt;ComponentId&gt;\n)</h4></section></summary><div class='docblock'>Adds any component accesses used by this [<code>WorldQuery</code>] to <code>access</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_archetype_component_access\" class=\"method trait-impl\"><a href=\"#method.update_archetype_component_access\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">update_archetype_component_access</a>(\n    state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::State,\n    _archetype: &amp;Archetype,\n    _access: &amp;mut Access&lt;ArchetypeComponentId&gt;\n)</h4></section></summary><div class='docblock'>For the given <code>archetype</code>, adds any component accessed used by this [<code>WorldQuery</code>] to <code>access</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.init_state\" class=\"method trait-impl\"><a href=\"#method.init_state\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">init_state</a>(_world: &amp;mut World) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::State</h4></section></summary><div class='docblock'>Creates and initializes a <a href=\"WorldQuery::State\"><code>State</code></a> for this [<code>WorldQuery</code>] type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.matches_component_set\" class=\"method trait-impl\"><a href=\"#method.matches_component_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">matches_component_set</a>(\n    state: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(F0, F1, F2)</a> as WorldQuery&gt;::State,\n    _set_contains_id: &amp;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(ComponentId) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if this query matches a set of components. Otherwise, returns <code>false</code>.</div></details></div></details>","WorldQuery","foliage::color::Rgb"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SystemParam-for-(P0,+P1,+P2,+P3)\" class=\"impl\"><a href=\"#impl-SystemParam-for-(P0,+P1,+P2,+P3)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P0, P1, P2, P3&gt; SystemParam for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2, P3)</a><span class=\"where fmt-newline\">where\n    P0: SystemParam,\n    P1: SystemParam,\n    P2: SystemParam,\n    P3: SystemParam,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.State\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.State\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">State</a> = (&lt;P0 as SystemParam&gt;::State, &lt;P1 as SystemParam&gt;::State, &lt;P2 as SystemParam&gt;::State, &lt;P3 as SystemParam&gt;::State)</h4></section></summary><div class='docblock'>Used to store data which persists across invocations of a system.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a>&lt;'w, 's&gt; = (&lt;P0 as SystemParam&gt;::Item&lt;'w, 's&gt;, &lt;P1 as SystemParam&gt;::Item&lt;'w, 's&gt;, &lt;P2 as SystemParam&gt;::Item&lt;'w, 's&gt;, &lt;P3 as SystemParam&gt;::Item&lt;'w, 's&gt;)</h4></section></summary><div class='docblock'>The item type returned when constructing this system param.\nThe value of this associated type should be <code>Self</code>, instantiated with new lifetimes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.init_state\" class=\"method trait-impl\"><a href=\"#method.init_state\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">init_state</a>(\n    _world: &amp;mut World,\n    _system_meta: &amp;mut SystemMeta\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2, P3)</a> as SystemParam&gt;::State</h4></section></summary><div class='docblock'>Registers any [<code>World</code>] access used by this [<code>SystemParam</code>]\nand creates a new instance of this param’s <a href=\"Self::State\"><code>State</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_archetype\" class=\"method trait-impl\"><a href=\"#method.new_archetype\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">new_archetype</a>(\n    _: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2, P3)</a> as SystemParam&gt;::State,\n    _archetype: &amp;Archetype,\n    _system_meta: &amp;mut SystemMeta\n)</h4></section></summary><div class='docblock'>For the specified [<code>Archetype</code>], registers the components accessed by this [<code>SystemParam</code>] (if applicable).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply\" class=\"method trait-impl\"><a href=\"#method.apply\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">apply</a>(\n    _: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2, P3)</a> as SystemParam&gt;::State,\n    _system_meta: &amp;SystemMeta,\n    _world: &amp;mut World\n)</h4></section></summary><div class='docblock'>Applies any deferred mutations stored in this [<code>SystemParam</code>]’s state.\nThis is used to apply <a href=\"crate::prelude::Commands\"><code>Commands</code></a> during <a href=\"crate::prelude::apply_deferred\"><code>apply_deferred</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_param\" class=\"method trait-impl\"><a href=\"#method.get_param\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">get_param</a>&lt;'w, 's&gt;(\n    state: &amp;'s mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2, P3)</a> as SystemParam&gt;::State,\n    _system_meta: &amp;SystemMeta,\n    _world: UnsafeWorldCell&lt;'w&gt;,\n    _change_tick: Tick\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2, P3)</a> as SystemParam&gt;::Item&lt;'w, 's&gt;</h4></section></summary><div class='docblock'>Creates a parameter to be passed into a <a href=\"super::SystemParamFunction\"><code>SystemParamFunction</code></a>. <a>Read more</a></div></details></div></details>","SystemParam","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SystemParam-for-(P0,+P1,+P2)\" class=\"impl\"><a href=\"#impl-SystemParam-for-(P0,+P1,+P2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P0, P1, P2&gt; SystemParam for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2)</a><span class=\"where fmt-newline\">where\n    P0: SystemParam,\n    P1: SystemParam,\n    P2: SystemParam,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.State\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.State\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">State</a> = (&lt;P0 as SystemParam&gt;::State, &lt;P1 as SystemParam&gt;::State, &lt;P2 as SystemParam&gt;::State)</h4></section></summary><div class='docblock'>Used to store data which persists across invocations of a system.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Item</a>&lt;'w, 's&gt; = (&lt;P0 as SystemParam&gt;::Item&lt;'w, 's&gt;, &lt;P1 as SystemParam&gt;::Item&lt;'w, 's&gt;, &lt;P2 as SystemParam&gt;::Item&lt;'w, 's&gt;)</h4></section></summary><div class='docblock'>The item type returned when constructing this system param.\nThe value of this associated type should be <code>Self</code>, instantiated with new lifetimes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.init_state\" class=\"method trait-impl\"><a href=\"#method.init_state\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">init_state</a>(\n    _world: &amp;mut World,\n    _system_meta: &amp;mut SystemMeta\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2)</a> as SystemParam&gt;::State</h4></section></summary><div class='docblock'>Registers any [<code>World</code>] access used by this [<code>SystemParam</code>]\nand creates a new instance of this param’s <a href=\"Self::State\"><code>State</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_archetype\" class=\"method trait-impl\"><a href=\"#method.new_archetype\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">new_archetype</a>(\n    _: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2)</a> as SystemParam&gt;::State,\n    _archetype: &amp;Archetype,\n    _system_meta: &amp;mut SystemMeta\n)</h4></section></summary><div class='docblock'>For the specified [<code>Archetype</code>], registers the components accessed by this [<code>SystemParam</code>] (if applicable).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply\" class=\"method trait-impl\"><a href=\"#method.apply\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">apply</a>(\n    _: &amp;mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2)</a> as SystemParam&gt;::State,\n    _system_meta: &amp;SystemMeta,\n    _world: &amp;mut World\n)</h4></section></summary><div class='docblock'>Applies any deferred mutations stored in this [<code>SystemParam</code>]’s state.\nThis is used to apply <a href=\"crate::prelude::Commands\"><code>Commands</code></a> during <a href=\"crate::prelude::apply_deferred\"><code>apply_deferred</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_param\" class=\"method trait-impl\"><a href=\"#method.get_param\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">get_param</a>&lt;'w, 's&gt;(\n    state: &amp;'s mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2)</a> as SystemParam&gt;::State,\n    _system_meta: &amp;SystemMeta,\n    _world: UnsafeWorldCell&lt;'w&gt;,\n    _change_tick: Tick\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(P0, P1, P2)</a> as SystemParam&gt;::Item&lt;'w, 's&gt;</h4></section></summary><div class='docblock'>Creates a parameter to be passed into a <a href=\"super::SystemParamFunction\"><code>SystemParamFunction</code></a>. <a>Read more</a></div></details></div></details>","SystemParam","foliage::color::Rgb"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystemConfigs%3C(SystemConfigTupleMarker,+P0,+P1,+P2,+P3)%3E-for-(S0,+S1,+S2,+S3)\" class=\"impl\"><a href=\"#impl-IntoSystemConfigs%3C(SystemConfigTupleMarker,+P0,+P1,+P2,+P3)%3E-for-(S0,+S1,+S2,+S3)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P0, S0, P1, S1, P2, S2, P3, S3&gt; IntoSystemConfigs&lt;(SystemConfigTupleMarker, P0, P1, P2, P3)&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(S0, S1, S2, S3)</a><span class=\"where fmt-newline\">where\n    S0: IntoSystemConfigs&lt;P0&gt;,\n    S1: IntoSystemConfigs&lt;P1&gt;,\n    S2: IntoSystemConfigs&lt;P2&gt;,\n    S3: IntoSystemConfigs&lt;P3&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.in_set\" class=\"method trait-impl\"><a href=\"#method.in_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">in_set</a>(\n    self,\n    set: impl SystemSet\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Add these systems to the provided <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before\" class=\"method trait-impl\"><a href=\"#method.before\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Run before all systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.after\" class=\"method trait-impl\"><a href=\"#method.after\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">after</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Run after all systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.distributive_run_if\" class=\"method trait-impl\"><a href=\"#method.distributive_run_if\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distributive_run_if</a>&lt;M&gt;(\n    self,\n    condition: impl Condition&lt;M&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Add a run condition to each contained system. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_if\" class=\"method trait-impl\"><a href=\"#method.run_if\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">run_if</a>&lt;M&gt;(\n    self,\n    condition: impl Condition&lt;M&gt;\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Run the systems only if the [<code>Condition</code>] is <code>true</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ambiguous_with\" class=\"method trait-impl\"><a href=\"#method.ambiguous_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ambiguous_with</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Suppress warnings and errors that would result from these systems having ambiguities\n(conflicting access but indeterminate order) with systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ambiguous_with_all\" class=\"method trait-impl\"><a href=\"#method.ambiguous_with_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ambiguous_with_all</a>(self) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Suppress warnings and errors that would result from these systems having ambiguities\n(conflicting access but indeterminate order) with any other system.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chain</a>(self) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Treat this collection as a sequence of systems. <a>Read more</a></div></details></div></details>","IntoSystemConfigs<(SystemConfigTupleMarker, P0, P1, P2, P3)>","foliage::color::Rgba"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystemConfigs%3C(SystemConfigTupleMarker,+P0,+P1,+P2)%3E-for-(S0,+S1,+S2)\" class=\"impl\"><a href=\"#impl-IntoSystemConfigs%3C(SystemConfigTupleMarker,+P0,+P1,+P2)%3E-for-(S0,+S1,+S2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P0, S0, P1, S1, P2, S2&gt; IntoSystemConfigs&lt;(SystemConfigTupleMarker, P0, P1, P2)&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(S0, S1, S2)</a><span class=\"where fmt-newline\">where\n    S0: IntoSystemConfigs&lt;P0&gt;,\n    S1: IntoSystemConfigs&lt;P1&gt;,\n    S2: IntoSystemConfigs&lt;P2&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.in_set\" class=\"method trait-impl\"><a href=\"#method.in_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">in_set</a>(\n    self,\n    set: impl SystemSet\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Add these systems to the provided <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.before\" class=\"method trait-impl\"><a href=\"#method.before\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">before</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Run before all systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.after\" class=\"method trait-impl\"><a href=\"#method.after\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">after</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Run after all systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.distributive_run_if\" class=\"method trait-impl\"><a href=\"#method.distributive_run_if\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">distributive_run_if</a>&lt;M&gt;(\n    self,\n    condition: impl Condition&lt;M&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Add a run condition to each contained system. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_if\" class=\"method trait-impl\"><a href=\"#method.run_if\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">run_if</a>&lt;M&gt;(\n    self,\n    condition: impl Condition&lt;M&gt;\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Run the systems only if the [<code>Condition</code>] is <code>true</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ambiguous_with\" class=\"method trait-impl\"><a href=\"#method.ambiguous_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ambiguous_with</a>&lt;M&gt;(\n    self,\n    set: impl IntoSystemSet&lt;M&gt;\n) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Suppress warnings and errors that would result from these systems having ambiguities\n(conflicting access but indeterminate order) with systems in <code>set</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ambiguous_with_all\" class=\"method trait-impl\"><a href=\"#method.ambiguous_with_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ambiguous_with_all</a>(self) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Suppress warnings and errors that would result from these systems having ambiguities\n(conflicting access but indeterminate order) with any other system.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.chain\" class=\"method trait-impl\"><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">chain</a>(self) -&gt; NodeConfigs&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn System&lt;Out = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, In = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Treat this collection as a sequence of systems. <a>Read more</a></div></details></div></details>","IntoSystemConfigs<(SystemConfigTupleMarker, P0, P1, P2)>","foliage::color::Rgb"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()