(function() {var type_impls = {
"foliage":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoSystem%3C%3CT+as+System%3E::In,+%3CT+as+System%3E::Out,+()%3E-for-T\" class=\"impl\"><a href=\"#impl-IntoSystem%3C%3CT+as+System%3E::In,+%3CT+as+System%3E::Out,+()%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; IntoSystem&lt;&lt;T as System&gt;::In, &lt;T as System&gt;::Out, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt; for T<span class=\"where fmt-newline\">where\n    T: System,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.System\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.System\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">System</a> = T</h4></section></summary><div class='docblock'>The type of [<code>System</code>] that this instance converts into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_system\" class=\"method trait-impl\"><a href=\"#method.into_system\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_system</a>(this: T) -&gt; T</h4></section></summary><div class='docblock'>Turns this value into its corresponding [<code>System</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pipe\" class=\"method trait-impl\"><a href=\"#method.pipe\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pipe</a>&lt;B, Final, MarkerB&gt;(\n    self,\n    system: B\n) -&gt; CombinatorSystem&lt;Pipe, Self::System, &lt;B as IntoSystem&lt;Out, Final, MarkerB&gt;&gt;::System&gt;<span class=\"where fmt-newline\">where\n    B: IntoSystem&lt;Out, Final, MarkerB&gt;,</span></h4></section></summary><div class='docblock'>Pass the output of this system <code>A</code> into a second system <code>B</code>, creating a new compound system. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method trait-impl\"><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">map</a>&lt;T, F&gt;(self, f: F) -&gt; AdapterSystem&lt;F, Self::System&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Out) -&gt; T,</span></h4></section></summary><div class='docblock'>Pass the output of this system into the passed function <code>f</code>, creating a new system that\noutputs the value returned from the function. <a>Read more</a></div></details></div></details>","IntoSystem<<T as System>::In, <T as System>::Out, ()>","foliage::asset::IconAsset"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()